---
# Builds, tests and publishes the output to the Play store internal track.
name: Build & Espresso Test

"on":
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: self-hosted
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@8b55fa205ab4530d36f787a4de1009afaaa7f3b4 # v2.1.0
      - run: echo "/opt/java/openjdk/bin" >> $GITHUB_PATH
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - name: Gradle build
        uses: gradle/gradle-build-action@982da8e78c05368c70dac0351bb82647a9e9a5d2 # v2
        with:
          arguments: |
            assembleDebug
            assembleRelease
            assembleAndroidTest
            assembleReleaseUnitTest
            :app:compileReleaseSources
            :app:packageReleaseBundle
            lint
            app:createDebugUnitTestCoverageReport
            :app:assembleDebugAndroidTest --scan --stacktrace
        timeout-minutes: 10

      - name: Unit JUnit Report
        uses: mikepenz/action-junit-report@0831a82caad2465c31c6dd929978f640cb42556c # v4
        if: always()
        with:
          report_paths: "**/build/test-results/test*UnitTest/TEST-*.xml"

      - name: Upload coverage
        if: ${{ (github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }}
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3
        with:
          files: ./app/build/reports/coverage/test/debug/report.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: true

      - name: Upload lint result artifact
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4
        with:
          name: lint report
          path: app/build/reports/lint-results-debug.html
        if: always()

  espresso-test:
    name: "Espresso test"
    runs-on: self-hosted
    needs: build
    strategy:
      fail-fast: false
      matrix:
        android-api: [33, 32, 31, 30]
    steps:
      - run: echo "/android-sdk/platform-tools/" >> $GITHUB_PATH
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - run: ls -laht /home/runner/.android
      - name: "Check snapshot exists"
        id: check_snapshot_exists
        uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b # v2
        with:
          files: "/android-sdk/user_home/avd/test-${{ matrix.android-api }}.avd/snapshots/default_boot/screenshot.png"

      - name: Create AVD and generate snapshot for caching
        if: steps.check_snapshot_exists.outputs.files_exists == 'false'
        uses: reactivecircus/android-emulator-runner@99a4aac18b4df9b3af66c4a1f04c1f23fa10c270 # v2
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-window -gpu auto -noaudio -no-boot-anim -camera-back none -camera-front none -debug
          profile: pixel_3a
          target: google_apis
          ram-size: 4000M
          avd-name: test-${{ matrix.android-api }}
          disable-animations: true
          arch: x86_64
          cores: 1
          sdcard-path-or-size: 1000M
          script: |
            echo "Created AVD snapshot"

      - name: Espresso Test
        uses: reactivecircus/android-emulator-runner@99a4aac18b4df9b3af66c4a1f04c1f23fa10c270 # v2
        timeout-minutes: 20
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu auto -noaudio -no-boot-anim -camera-back none -camera-front none -debug
          profile: pixel_3a
          target: google_apis
          ram-size: 4000M
          avd-name: test-${{ matrix.android-api }}
          disable-animations: true
          arch: x86_64
          cores: 1
          sdcard-path-or-size: 1000M
          script: |
            adb shell settings put global bluetooth_on 0
            adb shell rm -rf /sdcard/googletest || echo "Couldn't delete googletest folder"
            adb uninstall com.example.testcoveragesample || echo "com.example.testcoveragesample not installed"
            adb uninstall com.example.testcoveragesample.test || echo "com.example.testcoveragesample.test not installed"
            ./gradlew createDebugCoverageReport --max-workers=1 --stacktrace --scan --no-daemon

      - name: Upload connected test result artifact
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4
        with:
          name: espresso-test-reports-${{ matrix.android-api }}
          path: app/build/reports/androidTests/connected/
        if: always()

      - name: Espresso JUnit Report
        uses: mikepenz/action-junit-report@0831a82caad2465c31c6dd929978f640cb42556c # v4
        if: always()
        with:
          report_paths: app/build/outputs/androidTest-results/connected/*.xml
      - name: Upload connected test coverage artifact
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4
        with:
          name: espresso-test-coverage-${{ matrix.android-api }}
          path: app/build/reports/coverage/androidTest/debug/
        if: always()
      - name: Upload coverage
        if: ${{ (github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) }}
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3
        with:
          files: app/build/reports/coverage/androidTest/debug/connected/report.xml
          flags: espressotests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: true
